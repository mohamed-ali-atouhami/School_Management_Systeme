// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id
  username  String   @unique
  //password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  //password    String
  phone       String?      @unique
  address     String
  image       String?
  bloodType   BloodType
  sex         Sex
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  Teacher     Teacher?     @relation(fields: [teacherId], references: [id])
  teacherId   String?
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String    @unique
  phone     String   @unique
  address   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  //password  String
  phone     String   @unique
  address   String
  image     String?
  bloodType BloodType
  sex       Sex
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  students  Student[]
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
}

model Grade {
  id        Int       @id @default(autoincrement())
  level     String    @unique
  createdAt DateTime  @default(now())
  students  Student[]
  classes   Class[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  createdAt     DateTime       @default(now())
  students      Student[]
  lessons       Lesson[]
  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  teachers  Teacher[]
  lessons   Lesson[]
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime     @default(now())
  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  // subjectId Int
  // subject   Subject   @relation(fields: [subjectId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  createdAt DateTime @default(now())
  // subjectId Int
  // subject   Subject   @relation(fields: [subjectId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int        @id @default(autoincrement())
  score        Int
  createdAt    DateTime   @default(now())
  studentId    String
  student      Student    @relation(fields: [studentId], references: [id])
  examId       Int?
  exam         Exam?      @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  createdAt DateTime @default(now())
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

enum BloodType {
  A_PLUS
  A_MINUS
  B_PLUS
  B_MINUS
  AB_PLUS
  AB_MINUS
  O_PLUS
  O_MINUS
}

enum Sex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
